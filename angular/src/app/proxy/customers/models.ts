import type { AuditedEntityDto } from '@abp/ng.core';
import type { ValueDto } from '../values/models';
import type { StoreLookupDto } from '../stores/models';

export interface CreateUpdateCustomerDto {
  name: string;
  tenantId?: string;
  address1: string;
  address2?: string;
  city: string;
  zip: string;
  stateProvinceId: string;
  countryId: string;
  isWholeSale: boolean;
  isOptDirectoryMarketing: boolean;
  statusValueId: string;
  acctClassValueId: string;
  acctManagerValueId?: string;
  fax?: string;
  taxExempt: boolean;
  discount: number;
  invoicePaymentSchedulerValueId: string;
  arStatementInvoiceTypeValueId?: string;
  referredByValueId?: string;
  typeId: string;
  storeId: string;
  discountOnWireout: number;
  termValueId: string;
  priceSheetCodeValueId?: string;
  customerReference?: string;
  comment?: string;
  accountOpenDateTime?: string;
  lastStatementDate?: string;
  lastPurchaseDate?: string;
  lastPaymentDate?: string;
  ytdPayments: number;
  lytdPayments: number;
  lifetimePayments: number;
  lifetimeCreditLimit: number;
  ytdAmount: number;
  lytDsalesAmount: number;
  lifetimeSalesAmount: number;
}

export interface CustomerDto extends AuditedEntityDto<string> {
  tenantId?: string;
  tenantName?: string;
  name?: string;
  address1?: string;
  address2?: string;
  city?: string;
  zip?: string;
  stateProvinceId?: string;
  stateProvince?: string;
  countryId?: string;
  country?: string;
  isWholeSale: boolean;
  isOptDirectoryMarketing: boolean;
  statusValueId?: string;
  statusValue?: string;
  acctClassValueId?: string;
  acctClassValue?: string;
  acctManagerValueId?: string;
  acctManagerValue?: string;
  fax?: string;
  taxExempt: boolean;
  discount: number;
  invoicePaymentSchedulerValueId?: string;
  invoicePaymentSchedulerValue?: string;
  arStatementInvoiceTypeValueId?: string;
  arStatementInvoiceTypeValue?: string;
  referredByValueId?: string;
  referredByValue?: string;
  typeId?: string;
  type?: string;
  storeId?: string;
  store?: string;
  discountOnWireout: number;
  termValueId?: string;
  termValue?: string;
  priceSheetCodeValueId?: string;
  priceSheetCodeValue?: string;
  customerReference?: string;
  comment?: string;
  accountOpenDateTime?: string;
  lastStatementDate?: string;
  lastPurchaseDate?: string;
  lastPaymentDate?: string;
  ytdPayments: number;
  lytdPayments: number;
  lifetimePayments: number;
  lifetimeCreditLimit: number;
  ytdAmount: number;
  lytDsalesAmount: number;
  lifetimeSalesAmount: number;
  availableStatuses: ValueDto[];
  availableTypes: ValueDto[];
  availableAcctClasses: ValueDto[];
  availableAcctManagers: ValueDto[];
  availableInvoicePaymentSchedule: ValueDto[];
  availableTerms: ValueDto[];
  availableARStatementInvoiceTypes: ValueDto[];
  availablePriceSheetCodes: ValueDto[];
  availableReferredBy: ValueDto[];
  availableStores: StoreLookupDto[];
}

export interface ImportCustomerDto {
  name: string;
  address1: string;
  address2?: string;
  city: string;
  zip: string;
  stateProvince: string;
  country: string;
  isWholeSale: boolean;
  isOptDirectoryMarketing: boolean;
  statusValue: string;
  acctClassValue: string;
  acctManagerValue?: string;
  fax?: string;
  taxExempt: boolean;
  discount: number;
  invoicePaymentSchedulerValue: string;
  arStatementInvoiceTypeValue?: string;
  referredByValue?: string;
  type: string;
  store: string;
  discountOnWireout: number;
  termValue: string;
  priceSheetCodeValue?: string;
  customerReference?: string;
  comment?: string;
  creationTime?: string;
}
